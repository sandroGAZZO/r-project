colnames(donnees2)=c("x","y","z")
grillexy=as.data.frame(grxy)
colnames(grillexy)=c("x","y")
coords=SpatialPoints(grillexy)
coordinates(donnees2) = ~x+y
kriging_result = autoKrige(z~1,donnees2, coords)
plot(kriging_result)
#ou
Zkrige = matrix(kriging_result$krige_output$var1.pred,
nrow=length(grx),ncol=length(gry),byrow=FALSE)
image.plot(grx,gry,Zkrige,zlim=c(100,300),main=titre,
col =tim.colors(64))
titre = "Krigeage ordinaire"
s=apply(cbind(kriging_result$krige_output$var1.var,
rep(0,length(kriging_result$krige_output$var1.var))),1,max)
Sigma = sqrt(matrix(s,nrow=length(grx),ncol=length(gry),byrow=FALSE))
titre = "Ecart-type de krigeage"
image.plot(grx,gry,Sigma,zlim=c(0,ceiling(max(Sigma))),
main=titre,col =tim.colors(64))
points(x,y,pch=19)
s=apply(cbind(kriging_result$krige_output$var1.var,
rep(0,length(kriging_result$krige_output$var1.var))),1,max)
Sigma = sqrt(matrix(s,nrow=length(grx),ncol=length(gry),byrow=FALSE))
titre = "Ecart-type de krigeage"
image.plot(grx,gry,Sigma,zlim=c(0,ceiling(max(Sigma))),
main=titre,col =tim.colors(64))
points(x,y,pch=19)
\item On d\'esire combiner les 2 approches. Pour cela on corrige
le mod\`ele d\'eterministe en chaque point de la grille par une estimation de
la diff\'erence concentration-mod\`ele obtenue en krigeant les diff\'erences observation-mod\`ele
aux stations. \\
Comparer aux deux cartes pr\'ec\'edentes.
K=krige.conv(geodata,loc=grxy,krige=
krige.control(type.krige="ok",obj.model=varioest))
Zkrige = matrix(K$predict,nrow=length(grx),ncol=length(gry),
byrow=FALSE)
titre = paste("Krigeage avec un modele",c.m)
image.plot(grx,gry,Zkrige,zlim=c(100,250),main=titre)
contour(grx,gry,Zkrige,levels=seq(100,250,50),add=TRUE)
points(x,y,pch=19)
s=apply(cbind(K$krige.var,rep(0,length(K$krige.var))),1,max)
Sigma = sqrt(matrix(s,nrow=length(grx),ncol=length(gry),byrow=FALSE))
titre = "Ecart-type de krigeage"
image.plot(grx,gry,Sigma,zlim=c(0,ceiling(max(Sigma))),
main=titre,col =tim.colors(64))
contour(grx,gry,Sigma,levels=seq(0,ceiling(max(Sigma)),5),
add=TRUE)
points(x,y,pch=19)
#### A t-on raison de faire une interpolation ordinaire
summary(lm(z~x+y))
@
Au regard de la variance de l'erreur, on voit que la prÃ©diction par krigeage ordinaire est trÃ¨s bonne en particulier aux alentours des points de l'Ã©chantillon.\\
Cependant, regardons  si la moyenne est constante ou une fonction linÃ©aire des sites ("summary(lm(z~x+y))"), si le modÃ¨le linÃ©aire est validÃ© alors il faut un krieage universel. On a bien une tendance (moyenne non constante), un krigeage universel est plus adaptÃ© que l'ordinaire.
rm(list=ls())
#--------------------------------------------
# chargement des packages et fonctions utilises
#--------------------------------------------
library(geoR)
library(fields)
library(automap)
setwd("C:/Users/Sandro/Documents/R/Stats_spatiales")
zerr=z-donnees[,4]
geodata = as.geodata(cbind(x,y,zerr))
m.d = 100                    # distance maximale
interv = seq(10,m.d,by=20)    # intervalles
p.m = 2                    # nombre minimal de paire
vario.b = variog(geodata,max.dist=m.d,pairs.min=p.m,
uvec=interv,messages.screen=FALSE)
plot(vario.b,main = "Variogramme empirique")
# 2. Ajustement du variogramme
#-----------------------------
c.m = "exponential"
zerr=z-donnees[,4]
summary(donnees)
x = donnees[,1]
y = donnees[,2]
z = donnees[,3]
donnees = read.table("stationsKm4.txt")
grille = read.table("grilleKm4.txt")
grille = read.table("grilleKm4.txt")
summary(donnees)
x = donnees[,1]
y = donnees[,2]
z = donnees[,3]
#hist(z)
#-----------
# modele
#-------
#View(grille)
grxy = grille[,1:2]
grx = seq(5,130,5)
gry = seq(5,130,5)
zerr=z-donnees[,4]
geodata = as.geodata(cbind(x,y,zerr))
m.d = 100                    # distance maximale
interv = seq(10,m.d,by=20)    # intervalles
p.m = 2                    # nombre minimal de paire
vario.b = variog(geodata,max.dist=m.d,pairs.min=p.m,
uvec=interv,messages.screen=FALSE)
plot(vario.b,main = "Variogramme empirique")
# 2. Ajustement du variogramme
#-----------------------------
c.m = "exponential"
i.c = c(500,50)
varioest = variofit(vario.b,cov.model = c.m,
minimisation.function = "nls",ini.cov.pars=i.c,fix.nugget=T,
fix.kappa=TRUE,max.dist=vario.b$max.dist)
titre = paste("modele ",c.m,", portee =",
round(varioest$cov.pars[2]*100)/100,", palier =",
round(varioest$cov.pars[1]*100)/100)
plot(vario.b,main=titre)
lines(varioest)
# 3. Krigeage
#------------
grxy = grille[,1:2]
grx = seq(5,130,5)
gry = seq(5,130,5)
K = krige.conv(geodata,loc=grxy,
krige=krige.control(type.krige="ok",obj.model=varioest))
Zkrige = matrix(K$predict+grille[,3],nrow=length(grx),
ncol=length(gry),byrow=FALSE)
titre = paste("Krigeage avec un modele",c.m)
titre = paste("Krigeage avec un modele",c.m)
image.plot(grx,gry,Zkrige,zlim=c(0,250),main=titre,
col=tim.colors(64))
contour(grx,gry,Zkrige,levels=seq(0,250,10),add=TRUE)
points(x,y,pch=19)
s=apply(cbind(K$krige.var,rep(0,length(K$krige.var))),1,max)
Sigma = sqrt(matrix(s,nrow=length(grx),ncol=length(gry),byrow=FALSE))
titre = "Ecart-type de krigeage"
image.plot(grx,gry,Sigma,zlim=c(0,ceiling(max(Sigma))),
main=titre,col =tim.colors(64))
#contour(grx,gry,Sigma,levels=seq(0,ceiling(max(Sigma))),add=TRUE)
points(x,y,pch=19)
donnees3=donnees2
donnees3$z=zerr
# Avec choix automatique du variogramme
###Krigeage avec choix automatique du variogramme
donnees2=as.data.frame(donnees[,1:3])
donnees3=donnees2
donnees3$z=zerr
kriging_result = autoKrige(z~1,donnees3, coords)
plot(kriging_result)
kriging_result = autoKrige(z~1,data.frame(donnees3), coords)
kriging_result = autoKrige(z~1,as.data.frame(donnees3), coords)
plot(kriging_result)
Zkrige = matrix(kriging_result$krige_output$var1.pred+
grille[,3],nrow=length(grx),
ncol=length(gry),byrow=FALSE)
donnees3=donnees2
donnees3$z=zerr
kriging_result = autoKrige(z~1,donnees3, coords)
plot(kriging_result)
Zkrige = matrix(kriging_result$krige_output$var1.pred+
grille[,3],nrow=length(grx),
ncol=length(gry),byrow=FALSE)
image.plot(grx,gry,Zkrige,zlim=c(100,250),main=titre,
col =tim.colors(64))
points(x,y,pch=19)
s=apply(cbind(kriging_result$krige_output$var1.var,
rep(0,length(kriging_result$krige_output$var1.var))),1,max)
Sigma = sqrt(matrix(s,nrow=length(grx),ncol=length(gry),
byrow=FALSE))
titre = "Ecart-type de krigeage"
image.plot(grx,gry,Sigma,zlim=c(0,ceiling(max(Sigma))),
main=titre,col =tim.colors(64))
points(x,y,pch=19)
rm(list=ls())
traceStrates = function(titre="",couleur='white'){
if (length(couleur)==1) couleur=rep(couleur,38)
plot(range(longitude),range(latitude),type="n",xlim=c(-66,-60),ylim=c(45,50),
main=titre,xlab="Longitude",ylab="Latitude")
rect(-66,45,-60,50,col='brown')
for(i in 401:439){
polygon(bornes[which(bornes[,1]==i),2:3],col=couleur[i-400])
}
}
library(fields)
library(spdep)
library(spatialreg)
#### OUVERTURE FICHIER #####
## Option 1
library(rgdal)
library(sp)
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
proj4string(mais)
coordinates(mais)
mais@data
# ou
mais<-data.frame(mais)
## Option 2
library(sf)
champ <- st_read(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
st_crs(champ)
st_coordinates(champ)
champ<-data.frame(champ)
summary(mais)
summary(champ)
str(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
#OBS=as.factor(OBS) ???
#OBS=as.factor(OBS) ???
#OBS=as.factor(OBS) ???
setwd("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet")
library(fields)
library(spdep)
library(geoR)
trace.front <- function(titre="",couleur="white"){
if (length(couleur)==1) couleur=rep(couleur,38)
plot(range(station$east),range(station$north),type="n",xlim=c(130,820),ylim=c(40,520),
main=titre,xlab="Longitude",ylab="Latitude")
rect(80,560,900,0,col='green')
polygon(front[,1:2],col="white")
}
station<-read.table("parana.txt",header = TRUE)
front<-read.table("parana-borders.txt", header =  TRUE)
summary(station)
summary(front)
front<- as.matrix(front)
trace.front(titre='Etat du Parana, Brésil')
points(station$east,station$north)
trace.front(titre='Etat du Parana, Brésil')
text(station$east,station$north,cex=0.5)
donnees<-station
####
# variogramme
#------------
# 1. Variogramme empirique
#-------------------------
geodata = as.geodata(donnees)#convertir les observations en geodata
m.d = 680                    # distance maximale
interv = seq(0,m.d,by=5)    # intervalles
p.m = 1                   # nombre minimal de paire
vario.c = variog(geodata,op="cloud")
plot(vario.c,main = "",pch='+')
vario.b = variog(geodata,max.dist=m.d,pairs.min=p.m,breaks=interv)
plot(vario.b,main = "")
vario.bc = variog(geodata,max.dist=m.d,pairs.min=p.m,breaks=interv,bin.cloud=TRUE)
plot(vario.bc,main = "Box-plot sur le variogramme empirique",bin.cloud=TRUE)
### Variogramme pluri-directionnelle
vario.b4 = variog4(geodata)
plot(vario.b4,main = "")
# 2. Ajustement du variogramme
#-----------------------------
c.m= "spherical"
i.c = c(0.5,700)
varioest = variofit(vario.b,cov.model = c.m,fix.kappa=T, ini.cov.pars=i.c,fix.nugget=T)
titre = paste("modele ",c.m,", portee =",round(varioest$cov.pars[2],2),", palier =",round(varioest$cov.pars[1],2),"nu = ",round(varioest$kappa,2))
plot(vario.b, main=titre)
lines(varioest)
#cauchy
#gencauchy
#circular (- bien)
x<-donnees$east
y<-donnees$north
#----graphique du champs--------
grx <- seq(140,780,by=2)
gry <- seq(60,470,by=2)
#
x= station[,1]
y= station[,2]
z=station[,3]
summary(lm(z~x+y))
#zerr=z-donnees[,4]
geodata = as.geodata(cbind(x,y,z))
m.d = 100                    # distance maximale
interv = seq(10,m.d,by=20)    # intervalles
p.m = 2                    # nombre minimal de paire
vario.b = variog(geodata,max.dist=m.d,pairs.min=p.m,
uvec=interv,messages.screen=FALSE)
plot(vario.b,main = "Variogramme empirique")
# 2. Ajustement du variogramme
#-----------------------------
c.m = "exponential"
i.c = c(500,50)
varioest = variofit(vario.b,cov.model = c.m,
minimisation.function = "nls",ini.cov.pars=i.c,fix.nugget=T,
fix.kappa=TRUE,max.dist=vario.b$max.dist)
titre = paste("modele ",c.m,", portee =",
round(varioest$cov.pars[2]*100)/100,", palier =",
round(varioest$cov.pars[1]*100)/100)
plot(vario.b,main=titre)
lines(varioest)
vario.c = variog(geodata,op="cloud")
plot(vario.c,main = "",pch='+')
x= station[,1]
y= station[,2]
z=station[,3]
summary(lm(z~x+y))
#===> préférable krigeage universel
#zerr=z-donnees[,4]
geodata = as.geodata(cbind(x,y,z))
m.d = 100                    # distance maximale
interv = seq(10,m.d,by=20)    # intervalles
p.m = 2                    # nombre minimal de paire
vario.c = variog(geodata,op="cloud")
plot(vario.c,main = "",pch='+')
rm(list=ls())
traceStrates = function(titre="",couleur='white'){
if (length(couleur)==1) couleur=rep(couleur,38)
plot(range(longitude),range(latitude),type="n",xlim=c(-66,-60),ylim=c(45,50),
main=titre,xlab="Longitude",ylab="Latitude")
rect(-66,45,-60,50,col='brown')
for(i in 401:439){
polygon(bornes[which(bornes[,1]==i),2:3],col=couleur[i-400])
}
}
#--------------------------------------------
# chargement des packages et fonctions utilises
#--------------------------------------------
library(fields)
library(spdep)
library(spatialreg)
#### OUVERTURE FICHIER #####
## Option 1
library(rgdal)
library(sp)
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
proj4string(mais)
coordinates(mais)
mais@data
# ou
mais<-data.frame(mais)
## Option 2
library(sf)
champ <- st_read(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
st_crs(champ)
st_coordinates(champ)
champ<-data.frame(champ)
summary(mais)
summary(champ)
str(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
#OBS=as.factor(OBS) ???
YIELD100<- 100*mais$YIELD
mais<-mais+YIELD100
summary(mais)
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
YIELD100<- 100*mais$YIELD
YIELD100
donnees<-cbin(mais,YIELD100)
donnees<-cbind(mais,YIELD100)
summary(donnees)
donnees<-cbind(mais,as.data.frame(YIELD100))
summary(donnees)
donnees<-cbind(mais,YIELD100)
donnees[,35]
donnees[:,35]
donnees[,35]<-colnames(donnees[,35],prefix = "YIELD100")
donnees[,34]<-colnames(donnees[,34],prefix = "YIELD100")
donnees[0,34]<-colnames(donnees[0,35],prefix = "YIELD100")
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
mais@data
# ou
mais<-data.frame(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
YIELD100<- 100*mais$YIELD
donnees<-cbind(mais,YIELD100)
donnees[0,35]<-colnames(donnees[0,35],prefix = "YIELD100")
summary(donnees)
mat<-load("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet/rosas1999")
mat<-load("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet/rosas1999.dbf")
mat<-load("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet/rosas1999.dbf")
mat
rm(list=ls())
traceStrates = function(titre="",couleur='white'){
if (length(couleur)==1) couleur=rep(couleur,38)
plot(range(longitude),range(latitude),type="n",xlim=c(-66,-60),ylim=c(45,50),
main=titre,xlab="Longitude",ylab="Latitude")
rect(-66,45,-60,50,col='brown')
for(i in 401:439){
polygon(bornes[which(bornes[,1]==i),2:3],col=couleur[i-400])
}
}
#--------------------------------------------
# chargement des packages et fonctions utilises
#--------------------------------------------
library(fields)
library(spdep)
library(spatialreg)
#### OUVERTURE FICHIER #####
## Option 1
library(rgdal)
library(sp)
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
proj4string(mais)
coordinates(mais)
mais@data
# ou
mais<-data.frame(mais)
## Option 2
library(sf)
champ <- st_read(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
st_crs(champ)
st_coordinates(champ)
champ<-data.frame(champ)
summary(mais)
summary(champ)
str(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
#OBS=as.factor(OBS) ???
YIELD100<- 100*mais$YIELD
donnees<-cbind(mais,YIELD100)
donnees[0,35]<-colnames(donnees[0,35],prefix = "YIELD100")
mat<-load("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet/rosas1999.dbf")
rm(list=ls())
traceStrates = function(titre="",couleur='white'){
if (length(couleur)==1) couleur=rep(couleur,38)
plot(range(longitude),range(latitude),type="n",xlim=c(-66,-60),ylim=c(45,50),
main=titre,xlab="Longitude",ylab="Latitude")
rect(-66,45,-60,50,col='brown')
for(i in 401:439){
polygon(bornes[which(bornes[,1]==i),2:3],col=couleur[i-400])
}
}
#--------------------------------------------
# chargement des packages et fonctions utilises
#--------------------------------------------
library(fields)
library(spdep)
library(spatialreg)
#### OUVERTURE FICHIER #####
## Option 1
library(rgdal)
library(sp)
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
proj4string(mais)
coordinates(mais)
mais@data
# ou
mais<-data.frame(mais)
## Option 2
library(sf)
champ <- st_read(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
st_crs(champ)
st_coordinates(champ)
champ<-data.frame(champ)
summary(mais)
summary(champ)
str(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
#OBS=as.factor(OBS) ???
YIELD100<- 100*mais$YIELD
donnees<-cbind(mais,YIELD100)
donnees[0,35]<-colnames(donnees[0,35],prefix = "YIELD100")
library(foreign)
mat<-read.dbf("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet/rosas1999.dbf")
mat
lm(formula = YIELD100~N + N2 + TOP2 +TOP3 +TOP4)
lineaire<-lm(formula = YIELD100~N + N2 + TOP2 +TOP3 +TOP4)
lineaire<-lm(formula = YIELD100~N + N2 + TOP2 +TOP3 +TOP4)
summary(lineaire)
SAR<-lagsarlm(formula = YIELD100~N + N2 + TOP2 +TOP3 +TOP4) # = lag spatial geoda
summary(SAR)
SAR<-lagsarlm(formula = YIELD100~N + N2 + TOP2 +TOP3 +TOP4) # = lag spatial geoda
poids<-read.dbf("C:/Users/Sandro/Documents/R/Stats_spatiales/Projet/rosas1999.dbf")
lineaire<-lm(formula = YIELD100~N + N2 + TOP2 +TOP3 +TOP4)
summary(lineaire)
SAR<-lagsarlm(formula=lineaire,listw = poids, type = "lag",
method = "eigen") # = lag spatial geoda
summary(SAR)
SAR<-lagsarlm(formula=YIELD100~N + N2 + TOP2 +TOP3 +TOP4,listw = poids, type = "lag",
method = "eigen") # = lag spatial geoda
voisin<-cbind(poids$TOP2,poids$TOP3,poids$TOP4,poids$N,poids$N2)
SAR<-lagsarlm(formula=lineaire,listw = poids, type = "lag",
method = "eigen") # = lag spatial geoda
poids
voisin
voisin<-cbind(poids$TOP2,poids$TOP3,poids$TOP4,poids$N,poids$N2)
voisin[0,1]<-colnames(voisin[0,1],prefix="TOP2")
voisin[0,2]<-colnames(voisin[0,2],prefix="TOP3")
voisin[0,3]<-colnames(voisin[0,3],prefix="TOP4")
voisin[0,4]<-colnames(voisin[0,4],prefix="N")
voisin[0,5]<-colnames(voisin[0,5],prefix="N2")
SAR<-lagsarlm(formula=lineaire,listw = poids, type = "lag",
method = "eigen") # = lag spatial geoda
summary(SAR)
