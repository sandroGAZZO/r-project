Des indices dâautocorrÃ©lation spatiale (Moran ou Geary) Ã©valuent la dÃ©pendance spatiale dâune mÃªme variable en diffÃ©rents sites et teste la significativitÃ© de la structure spatiale identifiÃ©e. Ils s'intÃ©ressent Ã  la proximitÃ© spatiale et Ã  la ressemblance ou dissemblance des sites Ã©tudiÃ©s.
voisinage1 <- tri2nb(coords,row.names=strate) # par triangulation
ppv <- knearneigh(coords, k=4)
voisinage2 = knn2nb(ppv)
ppv2 <- knearneigh(coords, k=2)
voisinage22 = knn2nb(ppv2)
knn <- knearneigh(coords, k=4)
nb1=knn2nb(knn)
dist=unlist(nbdists(nb1,coords))
up=max(dist)
voisinage3=dnearneigh(coords,0,up)
voisinage4 <- graph2nb(gabrielneigh(coords), sym = TRUE)
par(mfrow=c(2,2))
traceStrates('Voisinages par triangulation')
plot(voisinage1,coords,add=TRUE,col='red')
traceStrates('Voisinages par plus proches voisins')
plot(voisinage2,coords,add=TRUE,col='red')
traceStrates('Voisinages par plus petites distances')
plot(voisinage3,coords,add=TRUE,col='red')
traceStrates('Voisinages par graphe')
plot(voisinage4,coords,add=TRUE,col='red')
traceStrates('Voisinages par graphe')
plot(voisinage4,coords,add=TRUE,col='red')
#---------------------
voisinage = voisinage3
poids.vois <- nb2listw(voisinage,style="W")
mat.vois <- nb2mat(voisinage,style ="W")
poids.vois.sym = listw2U(poids.vois)  # pour symetriser W
distgab <- nbdists(voisinage4, coords)
fdist <- lapply(distgab, function(x) 1 - x/max(dist(coords)))
poids.vois2 <- nb2listw(voisinage4, glist = fdist)
## ou
poids.vois2 <- nb2listw(voisinage4, style ="W")
poids.vois.sym2 <- listw2mat(poids.vois2)
#---------------------
par(mfrow=c(1,1))
voisinage = voisinage3
poids.vois <- nb2listw(voisinage,style="W")
mat.vois <- nb2mat(voisinage,style ="W")
poids.vois.sym = listw2U(poids.vois)  # pour symetriser W
distgab <- nbdists(voisinage4, coords)
fdist <- lapply(distgab, function(x) 1 - x/max(dist(coords)))
#---------------------
par(mfrow=c(1,1))
traceStrates('Voisinages par triangulation')
voisinage = voisinage3
poids.vois <- nb2listw(voisinage,style="W")
mat.vois <- nb2mat(voisinage,style ="W")
poids.vois.sym = listw2U(poids.vois)  # pour symetriser W
distgab <- nbdists(voisinage4, coords)
fdist <- lapply(distgab, function(x) 1 - x/max(dist(coords)))
poids.vois2 <- nb2listw(voisinage4, glist = fdist)
## ou
poids.vois2 <- nb2listw(voisinage4, style ="W")
poids.vois.sym2 <- listw2mat(poids.vois2)
poids.vois2 <- nb2listw(voisinage4, glist = fdist)
## ou
poids.vois2 <- nb2listw(voisinage4, style ="W")
poids.vois.sym2 <- listw2mat(poids.vois2)
poids.vois2 <- nb2listw(voisinage4, glist = fdist)
## ou
poids.vois2 <- nb2listw(voisinage4, style ="W")
poids.vois.sym2 <- listw2mat(poids.vois2)
@
\subsection{Indice de Moran ou Geary}
######indice de Moran########
titre = paste("Indice de predation")
paletteBleue = colorRampPalette(c("white", "blue"))
couleur = paletteBleue(100)[findInterval(totconsum,seq(min(totconsum),max(totconsum),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(totconsum,2),cex=0.5)
\section{Diagramme de Moran}
Le diagramme de Moran (nuage de points entre les valeurs de la variable $Z$ Ã©tudiÃ©e centrÃ©e et valeurs moyennes de la variable pour les observations voisines ($WZ$) en ordonnÃ©e, avec $W$ la matrice de poids normalisÃ©e) permet une lecture rapide de la structure spatiale. A ce nuage, on ajoute la droite de rÃ©gression linÃ©aire de $WZ$ par $Z$,  les droites $Z = 0$ et $WZ = 0$ qui dÃ©limitent 4 quadrants.\\ Si la rÃ©partition des donnÃ©es est alÃ©atoire, pas de relation particuliÃ¨re entre $Z$ et  $WZ$ (rÃ©partition uniforme dans les quadrants). Sinon, la pente de la rÃ©gression linÃ©aire est non nulle; chaque quadrant donne un type dâassociation spatiale. Ce diagramme permet Ã©galement de relever les sites les plus atypiques, loins de la structure spatiale Ã©tudiÃ©e.
\begin{itemize}
\item Le quadrant 1 (en haut Ã  droite) donne des valeurs de  $Y$  plus grandes que la moyenne, dans un voisinage qui leur ressemblent (autocorrÃ©lation positive et indice Ã©levÃ©).
\item Le quadrant 2 (en bas Ã  droite) donne des valeurs de  $Y$  plus grandes que la moyenne, dans un voisinage qui ne leur ressemble pas (autocorrÃ©lation nÃ©gative et indice Ã©levÃ©).
\item Le quadrant 3 (en bas Ã  gauche) donne des valeurs de  $Y$  plus faibles que la moyenne, dans un voisinage qui  leur ressemble (autocorrÃ©lation positive et indice faible).
\item Le quadrant 4 (en haut Ã  gauche) donne des valeurs de  $Y$  plus faibles que la moyenne, dans un voisinage qui ne leur ressemble pas (autocorrÃ©lation nÃ©gative et indice faible).
\end{itemize}
<<fig=TRUE, echo=FALSE>>=
totconsumred <- scale(totconsum)
totconsumred=as.data.frame(totconsumred)
colnames(totconsumred)=c("totconsumred")
moran.plot(totconsumred$totconsumred, listw=poids.vois)
@
Le diagramme prÃ©cÃ©dent met en Ã©vidence une structure spatiale particuliÃ¨re (cadrants 1, 3 et 4). On calcule donc l'indice dâautocorrÃ©lation spatiale et effectue un test afin de rÃ©pondre Ã  la question: 1) les observations voisines sont-elles sensables ou pas par  hasard?  Si la rÃ©ponse est non il y a de lâautocorrÃ©lation spatiale mais dans quel sens. On teste la nullitÃ© de l'indice sous l'hypothÃ¨se de normalitÃ© des donnÃ©es  ou non (dans ce dernier cas on utilise la randomisation; la statistique des observations est comparÃ©e Ã  la distribution obtenue en permuttant au hasard les donnÃ©es).\\
Le programme suivant montre qu'il y a une auto-corrÃ©lation spatiale positive (indide de Moran positive et hypothÃ¨se de nullitÃ© de l'indice rejetÃ©e) avec un seul dÃ©calage.
<<echo=FALSE>>=
attach(totconsumred)
print(moran.test(totconsumred$totconsumred,poids.vois))## randomisation
##ou
print(moran.test(totconsum,poids.vois))## randomisation
print(moran.test(totconsum,poids.vois,randomisation=F))## sans randomisation
print(moran.mc(totconsum,poids.vois,nsim=99))## monte carlo
Calcul des intervales de l'indice de Moran :
moran.range <- function(lw) {
wmat <- listw2mat(lw)
return(range(eigen((wmat+t(wmat))/2)$values))
}
moran.range(poids.vois)
moran.range(poids.vois)
\paragraph*{Indice de Geary :} montre Ã©galement une autocorrÃ©lation spatiale positive (indice plus petite que $1$)
print(geary.mc(totconsum,poids.vois,nsim=99))
print(geary.test(totconsum,poids.vois))
print(geary.test(totconsum,poids.vois,randomisation=F))
@
\subsection{AutocorrÃ©lation spatiale locale}
Les indices prÃ©cÃ©dents mesurent l'autocorrÃ©lation globale, pour Ã©tudier lâautocorrÃ©lation spatiale locale (LISA ; Local Indicators of Spatial Association), des versions locales des indices prÃ©cÃ©dents existents et permettent de mesurer pour une variable donnÃ©e la dÃ©pendance locale entre une unitÃ© spatiale et les unitÃ©s spatiales voisines. Ils  permettent d'identifier les regroupements similaires autour dâun site donnÃ© et les zones de
non-stationnaritÃ© spatiale locale.\\
{\textbf L'Indice de Moran locale en un site $i$ est }:
$$
I_i = \sum_{j}w_{ij}(Z_j-\overline{Z})(Z_i-\overline{Z})
$$
<<fig=TRUE,echo=FALSE>>=
##LISA sur la variable centrÃ©e
moran.local <- localmoran(totconsumred$totconsumred,
poids.vois,zero.policy=TRUE)
quadrant <- vector(mode="numeric",length=nrow(moran.local))
# Centrer/reduire l'indice locam
moran.localred <- scale(moran.local[,1])
# significance threshold
signif <- 0.05
#builds a data quadrant
quadrant[totconsumred$totconsumred >0 & moran.localred>0] <- 4
quadrant[totconsumred$totconsumred <0 & moran.localred<0] <- 1
quadrant[totconsumred$totconsumred <0 & moran.localred>0] <- 2
quadrant[totconsumred$totconsumred >0 & moran.localred<0] <- 3
quadrant[moran.local[,5]>signif] <- 0
brks <- c(0,1,2,3,4)
colors <- c("white","blue",rgb(0,0,1,alpha=0.4),rgb(1,0,0,alpha=0.4),"red")
traceStrates("lISA",colors[findInterval(quadrant,brks,all.inside=FALSE)])
box()
legend("bottomleft", legend = c("insignificant","low-low","low-high","high-low","high-high"),
fill=colors,bty="n")
brks <- c(0,1,2,3,4)
colors <- c("white","blue",rgb(0,0,1,alpha=0.4),rgb(1,0,0,alpha=0.4),"red")
traceStrates("lISA",colors[findInterval(quadrant,brks,all.inside=FALSE)])
box()
legend("bottomleft", legend = c("insignificant","low-low","low-high","high-low","high-high"),
fill=colors,bty="n")
brks <- c(0,1,2,3,4)
colors <- c("white","blue",rgb(0,0,1,alpha=0.4),rgb(1,0,0,alpha=0.4),"red")
traceStrates("lISA",colors[findInterval(quadrant,brks,all.inside=FALSE)])
box()
legend("bottomleft", legend = c("insignificant","low-low","low-high","high-low","high-high"),
fill=colors,bty="n")
@
\section{RÃ©gression spatiale}
\subsection{ModÃ¨le linÃ©aire}
<<fig=TRUE,echo=FALSE>>=
# 1. Modele lineaire standard
#----------------------------
par(mfrow=c(2,1))
titre = paste("Profondeur")
paletteVerte = colorRampPalette(c("white", "green"))
couleur = paletteVerte(100)[findInterval(depth,seq(min(depth),max(depth),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(depth,2),cex=0.5)
titre = paste("Temperature")
paletteRouge = colorRampPalette(c("white", "red"))
couleur = paletteRouge(100)[findInterval(temperature,seq(min(temperature),max(temperature),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(temperature,2),cex=0.5)
totcons.lm <- lm(totconsum ~  temperature + depth)
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature)
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature + depth)
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature)
summary(totcons.lm)
anova(totcons.lm)
\subsection{ModÃ¨le SAR}
$$Z = \rho W  Z + X \beta + \varepsilon,$$ $\varepsilon \sim N(0,\sigma^2),$ ou pas $(I-\rho W)$ inversible
<<fig=TRUE,echo=FALSE>>=
totcons.lagsarlm<-lagsarlm(totcons.lm,listw=poids.vois,type="lag",method="eigen")
summary(totcons.lagsarlm)
res <- residuals(totcons.lagsarlm)## rÃ©sidus non-autocorrÃ©lÃ©s
moran.test(res,poids.vois)
titre = "Residus modele SAR a retard"
paletteRes = colorRampPalette(c("yellow", "cyan"))
couleur = paletteRes(100)[findInterval(res,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
par(mfrow=c(1,1))
traceStrates(titre,couleur)
# 1. Modele lineaire standard
#----------------------------
par(mfrow=c(2,1))
titre = paste("Profondeur")
paletteVerte = colorRampPalette(c("white", "green"))
couleur = paletteVerte(100)[findInterval(depth,seq(min(depth),max(depth),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(depth,2),cex=0.5)
titre = paste("Temperature")
paletteRouge = colorRampPalette(c("white", "red"))
couleur = paletteRouge(100)[findInterval(temperature,seq(min(temperature),max(temperature),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(temperature,2),cex=0.5)
totcons.lm <- lm(totconsum ~  temperature + depth)
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature)
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature + depth)
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature)
summary(totcons.lm)
anova(totcons.lm)
\subsection{ModÃ¨le SAR}
$$Z = \rho W  Z + X \beta + \varepsilon,$$ $\varepsilon \sim N(0,\sigma^2),$ ou pas $(I-\rho W)$ inversible
<<fig=TRUE,echo=FALSE>>=
par(mfrow=c(1,1))
totcons.lagsarlm<-lagsarlm(totcons.lm,listw=poids.vois,type="lag",method="eigen")
summary(totcons.lagsarlm)
res <- residuals(totcons.lagsarlm)## rÃ©sidus non-autocorrÃ©lÃ©s
moran.test(res,poids.vois)
titre = "Residus modele SAR a retard"
paletteRes = colorRampPalette(c("yellow", "cyan"))
couleur = paletteRes(100)[findInterval(res,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res,2),cex=0.5)
titre = "Residus modele SAR a retard"
paletteRes = colorRampPalette(c("yellow", "cyan"))
couleur = paletteRes(100)[findInterval(res,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res,2),cex=0.5)
Les mesures importantes de pertinence sont la valeur de log-vraisemblance, les critÃ¨res dâAkaÃ¯ke et de Schwarz. Ces critÃ¨res permettront de dÃ©celer la meilleure spÃ©cification spatiale : SignificativitÃ© du paramÃ¨tre autorÃ©gressif; Variation des valeurs estimÃ©es des coefficients des variables explicatives.\\
\paragraph{InterprÃ©tation du modÃ¨le} : dans un modÃ¨le linÃ©aire classique, l'impact d'une variation d'une variable explicative sur
la rÃ©ponse est Ã©gale au coefficient correspondant (dÃ©rivÃ©e partiel de la rÃ©ponse en fonction de la variable explcative).\\
Dans ce modÃ¨le SAR; les Ã©lÃ©ments diagonaux de la matrice des dÃ©rivÃ©es partielles de $z_i$ par rapport Ã  $x_i$ reprÃ©sentent les impacts directs qui incluent les effets de spillovers (rÃ©tombÃ©es) propres, hÃ©tÃ©rogÃ¨nes pour chaque observation en prÃ©sence dâautocorrÃ©lation spatiale, dÃ»s aux poids diffÃ©rents de la matrice dâintÃ©ractions. Les Ã©lÃ©ments hors-diagonaux reprÃ©sentent les impacts indirects ou effets de spillovers (collectÃ©s dans la matrice) ils quantifient les effets globaux (sur tout lâÃ©chantillon). En sommant les impacts directes  (resp. indirects), on obtient l'impact total direct (resp indirect).
rh_sar=totcons.lagsarlm$rho
betarm=totcons.lagsarlm$coefficients[2]
## La fonction invIrW calcule lâinverse de (I - rho*W)
Sw=invIrW(poids.vois, rh_sar)*betarm
n=length(totcons.lagsarlm$residuals)
i_n=matrix(1,nrow=n)
direct=diag(Sw)
indirect=Sw-diag(diag(Sw))
ADE=mean(direct) ## impact direct moyen
AIE=1/n*t(i_n)%*%indirect%*%i_n ## impact indirect moyen
ATE=1/n*t(i_n)%*%Sw%*%i_n ## impact total
# Calcul des effets indirects totaux pour chaque observation
Ind_tot=indirect%*%i_n
Ind_tot[1:10,1]
ADE
AIE
ATE
Imp<-impacts(totcons.lagsarlm,listw=poids.vois,R=1000)
# Calcul des effets indirects totaux pour chaque observation
Ind_tot=indirect%*%i_n
Ind_tot[1:10,1]
ADE
AIE
ATE
Imp<-impacts(totcons.lagsarlm,listw=poids.vois,R=1000)
\subsection{ModÃ¨le SEM}
AutocorrÃ©lation des residus (modÃ¨le SEM):
$Z = \rho W  X + X \beta + \varepsilon$,  avec  hypothese de normalitÃ© $\varepsilon \sim N(0,\sigma^2)$ ou non
lm.morantest(totcons.lm,poids.vois)
paletteRes = colorRampPalette(c("yellow", "cyan"))
###sans hypothese de normalite
res0 <- residuals(totcons.lm)
moran.test(res0,poids.vois)
#####graphique des residus
couleur = paletteRes(100)[findInterval(res0,seq(-0.3,0.3,l=100))]
titre = paste("Residus modele lineaire")
traceStrates(titre,couleur)
text(longitude,latitude,round(res0,2),cex=0.5)
lm.morantest(totcons.lm,poids.vois)
paletteRes = colorRampPalette(c("yellow", "cyan"))
###sans hypothese de normalite
res0 <- residuals(totcons.lm)
moran.test(res0,poids.vois)
#####graphique des residus
couleur = paletteRes(100)[findInterval(res0,seq(-0.3,0.3,l=100))]
titre = paste("Residus modele lineaire")
traceStrates(titre,couleur)
text(longitude,latitude,round(res0,2),cex=0.5)
On accepte l'existence d'une auto-corrÃ©lation positive
# Estimation du modÃ¨le
totcons.errorsarlm <- errorsarlm(totconsum ~  temperature,data=donnees,poids.vois)
#ou
#totcons.errorsarlm <- errorsarlm(totcons.lm,poids.vois)
summary(totcons.errorsarlm)
res1 <- residuals(totcons.errorsarlm)
moran.test(res1,poids.vois) ## les rÃ©sidus ne sont auto-corrÃ©lÃ©s
titre = "Residus modele SAR sur les erreurs"
couleur = paletteRes(100)[findInterval(res1,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res1,2),cex=0.5)
# Estimation du modÃ¨le
totcons.errorsarlm <- errorsarlm(totconsum ~  temperature,data=donnees,poids.vois)
#ou
#totcons.errorsarlm <- errorsarlm(totcons.lm,poids.vois)
summary(totcons.errorsarlm)
res1 <- residuals(totcons.errorsarlm)
moran.test(res1,poids.vois) ## les rÃ©sidus ne sont auto-corrÃ©lÃ©s
titre = "Residus modele SAR sur les erreurs"
couleur = paletteRes(100)[findInterval(res1,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res1,2),cex=0.5)
<<fig=TRUE,echo=FALSE>>=
# Estimation du modÃ¨le
totcons.errorsarlm <- errorsarlm(totconsum ~  temperature,data=donnees,poids.vois)
#ou
#totcons.errorsarlm <- errorsarlm(totcons.lm,poids.vois)
summary(totcons.errorsarlm)
res1 <- residuals(totcons.errorsarlm)
moran.test(res1,poids.vois) ## les rÃ©sidus ne sont auto-corrÃ©lÃ©s
titre = "Residus modele SAR sur les erreurs"
couleur = paletteRes(100)[findInterval(res1,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res1,2),cex=0.5)
@
\subsection{ModÃ¨le SDM: Modele mixte SAR Ã  retard}
ModÃ¨le avec dÃ©calages des variables explicatives) :
$Z = \rho_1 W_1  Z +\rho_2 W_2  X+ X \beta + \varepsilon $, $\varepsilon \sim N(0,\sigma^2)$.\\ C'est un modÃ¨le SAR avec le dÃ©calage spatial des variables explicatives en plus
totcons.mixte <- lagsarlm(totconsum ~  temperature,
data=donnees,poids.vois,type="mixed")
summary(totcons.mixte)
res3 <- residuals(totcons.mixte)
moran.test(res3,poids.vois)
titre = "Residus modele mixte SAR a retard"
couleur = paletteRes(100)[findInterval(res3,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res3,2),cex=0.5)
#########Une autre maniÃ¨re #######
# 1) crÃ©er des dÃ©calages spatiaux des X
# 2) modifier la formule
# 3) Estimer le modÃ¨le SAR augmentÃ©
# 1) CrÃ©ation des dÃ©calages spatiaux des X
# Utilisation de la fonction lag.listw()
donnees$Wtemperature=lag.listw(poids.vois,donnees$temperature)
# 2) Modifier la formule du modÃ¨le linÃ©aire
totcons.sarlm<- lm(totconsum ~  temperature + Wtemperature, data=donnees)
# 3) Estimation du modÃ¨le SAR sur cette formule augmentÃ©e des dÃ©calages spatiaux de
totcons.mixte2<- lagsarlm(totcons.sarlm,data=donnees,poids.vois, type="lag", method="eigen")
summary(totcons.mixte2)
totcons.mixte <- lagsarlm(totconsum ~  temperature,
data=donnees,poids.vois,type="mixed")
summary(totcons.mixte)
res3 <- residuals(totcons.mixte)
moran.test(res3,poids.vois)
titre = "Residus modele mixte SAR a retard"
couleur = paletteRes(100)[findInterval(res3,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res3,2),cex=0.5)
#########Une autre maniÃ¨re #######
# 1) crÃ©er des dÃ©calages spatiaux des X
# 2) modifier la formule
# 3) Estimer le modÃ¨le SAR augmentÃ©
# 1) CrÃ©ation des dÃ©calages spatiaux des X
# Utilisation de la fonction lag.listw()
donnees$Wtemperature=lag.listw(poids.vois,donnees$temperature)
# 2) Modifier la formule du modÃ¨le linÃ©aire
totcons.sarlm<- lm(totconsum ~  temperature + Wtemperature, data=donnees)
# 3) Estimation du modÃ¨le SAR sur cette formule augmentÃ©e des dÃ©calages spatiaux de
totcons.mixte2<- lagsarlm(totcons.sarlm,data=donnees,poids.vois, type="lag", method="eigen")
summary(totcons.mixte2)
Interpretation du modÃ¨le SDM
W_mat=nb2mat(voisinage,style="W")
betaw=totcons.mixte$coefficients[3]
beta=totcons.mixte$coefficients[2]
rh_sdm=totcons.mixte$rho
Sw=invIrW(poids.vois, rh_sdm)%*%(diag(n)*beta + W_mat*betaw)
direct=diag(Sw)
indirect=Sw-diag(diag(Sw))
ADE_sdm=mean(direct)
AIE_sdm=1/n*t(i_n)%*%indirect%*%i_n
ATE_sdm=1/n*t(i_n)%*%Sw%*%i_n
ADE_sdm
AIE_sdm
ATE_sdm
imp_sdm<-impacts(totcons.mixte,listw=poids.vois, R=1000)
imp_sdm
W_mat=nb2mat(voisinage,style="W")
betaw=totcons.mixte$coefficients[3]
beta=totcons.mixte$coefficients[2]
rh_sdm=totcons.mixte$rho
Sw=invIrW(poids.vois, rh_sdm)%*%(diag(n)*beta + W_mat*betaw)
direct=diag(Sw)
indirect=Sw-diag(diag(Sw))
ADE_sdm=mean(direct)
AIE_sdm=1/n*t(i_n)%*%indirect%*%i_n
ATE_sdm=1/n*t(i_n)%*%Sw%*%i_n
ADE_sdm
AIE_sdm
ATE_sdm
imp_sdm<-impacts(totcons.mixte,listw=poids.vois, R=1000)
imp_sdm
<<echo=FALSE>>=
W_mat=nb2mat(voisinage,style="W")
betaw=totcons.mixte$coefficients[3]
beta=totcons.mixte$coefficients[2]
rh_sdm=totcons.mixte$rho
Sw=invIrW(poids.vois, rh_sdm)%*%(diag(n)*beta + W_mat*betaw)
direct=diag(Sw)
indirect=Sw-diag(diag(Sw))
ADE_sdm=mean(direct)
AIE_sdm=1/n*t(i_n)%*%indirect%*%i_n
ATE_sdm=1/n*t(i_n)%*%Sw%*%i_n
ADE_sdm
AIE_sdm
ATE_sdm
imp_sdm<-impacts(totcons.mixte,listw=poids.vois, R=1000)
imp_sdm
@
\subsection{ModÃ¨le SLX}
ModÃ¨le SLX : $Z = \rho W  X + X \beta + \varepsilon$, $\varepsilon \sim N(0,\sigma^2$, dÃ©calage spatial des variables explicatives
<<echo=FALSE>>=
# Estimation par MCO du modÃ¨le de base en incluant les dÃ©calages spatiaux des X
totcons.sarlm<- lm(totconsum ~  temperature + Wtemperature, data=donnees)
totcons.slx=lm(totcons.sarlm,data=donnees)
summary(totcons.slx)
# InterprÃ©tation du modÃ¨le SLX
beta<-totcons.slx$coefficients[2]
betaw<-totcons.slx$coefficients[3]
Sw<-diag(n)*beta + W_mat*betaw
ADE_slx<-mean(diag(Sw))
AIE_slx<-mean(rowSums(W_mat*betaw))
AIE_slx_alt<-mean(colSums(W_mat*betaw))
ATE_slx<-beta+ AIE_slx
@
\subsection{Comparaison des modÃ¨les}
## Test de Lagrande de modÃ¨les linÃ©aires
totcons.lm <- lm(totconsum ~temperature+depth)
summary(lm.LMtests(totcons.lm, poids.vois)) ## test de dÃ©pendance sur les erreurs du modÃ¨le linÃ©aire classique
#LMlag= test de dÃ©pendence sur l'absence de dÃ©calage dans la #variable rÃ©ponse; RLMerr  test de dÃ©pendance sur les erreurs du #modÃ¨le avec rÃ©ponse dÃ©calÃ©, SARMA=LMerr + RLMlag,...
res=lm.LMtests(totcons.lm, poids.vois,
test=c("LMerr", "LMlag", "RLMerr","RLMlag", "SARMA"))
summary(res)
lm.LMtests(residuals(totcons.lm), poids.vois)## sur les rÃ©sidus
# Comparaison des modeles
#------------------------
# Test de rapport de vraissemblance
print(LR.sarlm(totcons.mixte,totcons.errorsarlm))
### comparaison des AIC
print(AIC(totcons.mixte,totcons.errorsarlm,totcons.lagsarlm,totcons.lm,totcons.slx))
# Comparaison des modeles
#------------------------
# Test de rapport de vraissemblance
print(LR.sarlm(totcons.mixte,totcons.errorsarlm))
### comparaison des AIC
print(AIC(totcons.mixte,totcons.errorsarlm,totcons.lagsarlm,totcons.lm,totcons.slx))
\end{document}
summary(donnees)
summary(mais)
rm(list=ls())
traceStrates = function(titre="",couleur='white'){
if (length(couleur)==1) couleur=rep(couleur,38)
plot(range(longitude),range(latitude),type="n",xlim=c(-66,-60),ylim=c(45,50),
main=titre,xlab="Longitude",ylab="Latitude")
rect(-66,45,-60,50,col='brown')
for(i in 401:439){
polygon(bornes[which(bornes[,1]==i),2:3],col=couleur[i-400])
}
}
#--------------------------------------------
# chargement des packages et fonctions utilises
#--------------------------------------------
library(fields)
library(spdep)
library(spatialreg)
#### OUVERTURE FICHIER #####
## Option 1
library(rgdal)
library(sp)
mais <- readOGR(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
proj4string(mais)
coordinates(mais)
mais@data
# ou
mais<-data.frame(mais)
## Option 2
library(sf)
champ <- st_read(dsn = 'C:/Users/Sandro/Documents/R/Stats_spatiales/Projet',
layer = 'rosas1999')
st_crs(champ)
st_coordinates(champ)
champ<-data.frame(champ)
summary(mais)
summary(champ)
summary(donnees)
summary(donnees)
donnees = read.csv(file = "C:/Users/Sandro/Documents/R/Stats_spatiales/StLaurent.csv",sep=";")
summary(donnees)
attach(donnees)
BH = as.factor(BH)
summary(champ)
summary(mais)
head(mais)
str(mais)
summary(mais)
attach(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
summary(mais)
str(mais)
attach(mais)
TOP2=as.factor(TOP2)
TOP3=as.factor(TOP3)
TOP4=as.factor(TOP4)
TOPO=as.factor(TOPO)
