## T_weib = rweibull(n=100, shape=1.2, scale=0.2)
#'
#'
#'
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
## T_weib = rweibull(n=100, shape=1.2, scale=0.2)
## hist(T_weib, probability=TRUE, main="f(t)")
#'
#'
#'
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
## T_weib = rweibull(n=100, shape=1.2, scale=0.2)
## hist(T_weib, probability=TRUE, main="f(t)")
## abline(v=log(2)^(1/1.2)*0.2, col="red") # mÃ©diane
#'
#'
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
## T_weib = rweibull(n=100, shape=1.2, scale=0.2)
## hist(T_weib, probability=TRUE, main="f(t)")
## abline(v=log(2)^(1/1.2)*0.2, col="red") # mÃ©diane
## #median(T_weib)
#'
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
## T_weib = rweibull(n=100, shape=1.2, scale=0.2)
## hist(T_weib, probability=TRUE, main="f(t)")
## abline(v=log(2)^(1/1.2)*0.2, col="red") # mÃ©diane
## #median(T_weib)
## curve(dweibull(x, shape=1.2, scale=0.2), add=TRUE, col="red")
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
## T_weib = rweibull(n=100, shape=1.2, scale=0.2)
## hist(T_weib, probability=TRUE, main="f(t)")
## abline(v=log(2)^(1/1.2)*0.2, col="red") # mÃ©diane
## #median(T_weib)
## curve(dweibull(x, shape=1.2, scale=0.2), add=TRUE, col="red")
##
#'
#'
#'
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
T_weib = rweibull(n=100, shape=1.2, scale=0.2)
hist(T_weib, probability=TRUE, main="f(t)")
abline(v=log(2)^(1/1.2)*0.2, col="red") # mÃ©diane
#' @) Ecrire la vraisemblance pour la loi exponentielle de durÃ©e, maximiser la vraisemblance analytiquement, comparer les rÃ©sultats obtenus aux rÃ©sultats numÃ©riques.
#'
#' @) Tracer la fonction de hasard aussociÃ©e Ã  la distribution log-normale estimÃ©e :
## ---------------------------------------------------------
lognormHaz<-{function(x, meanlog, sdlog) dlnorm(x, meanlog=meanlog,
sdlog=sdlog)/
plnorm(x, meanlog=meanlog, sdlog=sdlog, lower.tail=FALSE)}
curve(lognormHaz(x, meanlog=par_lnorm$estimate["meanlog"],
sdlog=par_lnorm$estimate["sdlog"]),
xlim=c(0, 150))
#'
#' @) Estimation non-paramÃ©trique (noyau) de la fonction de hasard :
## ---------------------------------------------------------
library(muhaz)
ti=data[,"ttr"]
ci=data[,"relapse"]
fit=muhaz(ti, ci, min.time=0, max.time=180)
#' \frac{U_0}{\sqrt{V_0}} \sim \mathcal{N}(0,1)
#' $$
#' oÃ¹ de maniÃ¨re Ã©quivalente
#' $$
#' \frac{U_0^2}{V_0} \sim \chi_1^2
#' $$
#'
#'
## ---------------------------------------------------------
# Exemple de calcul "Ã  la main"
Patient = 1:6
Survtime = c(6,7,10,15,19,25)
Censor = c(1,0,1,1,0,1)
Group = c("C","C","T","C","T","T")
data = cbind.data.frame(Patient = Patient, Survtime = Survtime ,
Censor = Censor,
Group = Group)
temps = unique(Survtime[Censor == 1])
U0 = 0
V0 = 0
ti = 6
lignes = c()
for (ti in temps){
X = subset(data,Survtime >= ti)
ni = nrow(X)
di = sum(X$Survtime == ti)
d0i = sum((X$Group == "C")&(X$Survtime == ti)&(X$Censor == 1))
d1i = sum((X$Group == "T")&(X$Survtime == ti)&(X$Censor == 1))
n0i = sum(X$Group == "C")
n1i = sum(X$Group == "T")
M = matrix(c(d0i,d1i,n0i - d0i,n1i - d1i),2,2,byrow = T)
dimnames(M) = list(c("Failure","Non-failure"),c("Control","Treatement"))
print(paste("Tableau pour ti =",ti))
print(M)
e0i = n0i*di/ni
v0i = n0i*n1i*di*(ni-di)/(ni^2*(ni - 1))
if (ni == 1) v0i = 0
lignes = rbind.data.frame(lignes,c(ti,ni,di,n0i,d0i,n1i,d1i,e0i,v0i))
}
colnames(lignes) = c("ti","ni","di","n0i","d0i","n1i","d1i","e0i","v0i")
lignes = round(lignes,4)
lignes
sum(lignes$d0i)
sum(lignes$e0i)
U0 = sum(lignes$d0i) - sum(lignes$e0i)
U0
V0 = sum(lignes$v0i)
V0
X2 = U0^2/V0
X2
pchisq(X2,df = 1,lower.tail = F) # p-value du test statistique
#' On note l'Ã©quivalence suivante :
#' $$u = \frac{u_0}{\sqrt{Var(u_0)}}\sim \mathcal{N}\left(0,1\right) \Leftrightarrow \frac{u_{0}^{2}}{Var(u_0)}\sim \chi^2_{1}$$
#'
## ---------------------------------------------------------
log.rank.test=survdiff(Surv(temps, event)~ech, data=exo_cours)
#'
#' ## Description de donnÃ©es pharmacoSmoking
#' @) Estimation de Kaplan-Meier
## ---------------------------------------------------------
data=read.csv2("smoking.csv")
result.km = survfit(Surv(ttr, relapse)~1, conf.type="log-log", data=data)
plot(result.km, conf.int=TRUE, mark="+", xlab="Time (months)", ylab ="Survival")
title("Relapse in smoking")
## Les quantiles
quantile(result.km)
#' @) Estimation  des paramÃ¨tres pour loi de Weibull, Gamma et Exponentielle.
#' Ajouter les fonctions de survie estimÃ©es sur l'estimation non-paramÃ©trique de Kaplan-Meier
#'
## ---------------------------------------------------------
library(fitdistrplus)
plot(result.km, conf.int=TRUE, mark="+", xlab="Time (months)", ylab ="Survival")
title("Relapse in smoking")
library(dplyr)
left=data[,"ttr"]
left[left== 0 ] = 0.5
right=ifelse(data[,"relapse"]==1, left, NA)
datacens=cbind.data.frame(left=left, right=right)
par_weib=fitdistcens(datacens, "weibull")
curve(pweibull(x, shape=par_weib$estimate["shape"],
scale=par_weib$estimate["scale"], lower.tail=FALSE), add=TRUE, col="red")
par_exp=fitdistcens(datacens, "exp")
curve(pexp(x,
rate=par_exp$estimate["rate"], lower.tail=FALSE), add=TRUE, col="blue")
par_gamma=fitdistcens(datacens, "gamma")
curve(pgamma(x, shape=par_gamma$estimate["shape"],
rate=par_gamma$estimate["rate"], lower.tail=FALSE), add=TRUE, col="magenta")
par_lnorm=fitdistcens(datacens, "lnorm")
curve(plnorm(x, meanlog=par_lnorm$estimate["meanlog"],
sdlog=par_lnorm$estimate["sdlog"], lower.tail=FALSE), add=TRUE, col="darkgreen")
legend("topright",
legend=c("Weibull", "Exp", "Gamma", "Log-norm"),
col=c("red", "blue", "magenta", "darkgreen"),
lty=rep(1,4))
#' @) Ecrire la vraisemblance pour la loi exponentielle de durÃ©e, maximiser la vraisemblance analytiquement, comparer les rÃ©sultats obtenus aux rÃ©sultats numÃ©riques.
#'
#' @) Tracer la fonction de hasard aussociÃ©e Ã  la distribution log-normale estimÃ©e :
## ---------------------------------------------------------
lognormHaz<-{function(x, meanlog, sdlog) dlnorm(x, meanlog=meanlog,
sdlog=sdlog)/
plnorm(x, meanlog=meanlog, sdlog=sdlog, lower.tail=FALSE)}
curve(lognormHaz(x, meanlog=par_lnorm$estimate["meanlog"],
sdlog=par_lnorm$estimate["sdlog"]),
xlim=c(0, 150))
#'
#' @) Estimation non-paramÃ©trique (noyau) de la fonction de hasard :
## ---------------------------------------------------------
library(muhaz)
ti=data[,"ttr"]
ci=data[,"relapse"]
fit=muhaz(ti, ci, min.time=0, max.time=180)
plot(fit)
abline(v=c(12,52), lty=2, col="blue")
#'
#' \underline{Remarque :} le paramÃ©trage des loi de probabilitÃ© peut Ãªtre diffÃ©rent. Par exemple, pour la loi de Weibull :
#' \begin{tabular}{|c|c|c|}
#' \hline
#'  & ParamÃ©trage 1 (cours) & ParamÃ©trage 2 (R) \\
#'  \hline
#'  $H(t)$ & $H(t) = \alpha t^\gamma=\left(\frac{1}{1/(\alpha^{1/\gamma})}t\right)^{\gamma}$ & $H(t) = \left(\frac{x}{b}\right)^{a}$  \\
#' \hline
#' \end{tabular}
## ---- eval=FALSE------------------------------------------
curve(dweibull(x,shape=2.2, scale=3.5), col="red", from=0, to=30)
#curve(2.2*(1/3.5)^2.2*x^(2.2-1)*exp(-(1/3.5)^2.2*x^2.2),
#       add=TRUE, col="black")
curve(dexp(x,rate=0.2), col="blue", add=TRUE)
#curve(0.2*exp(-0.2*x), col="red", add=TRUE)
curve(dlnorm(x, meanlog = 2.5, sdlog = 1.2, log = FALSE),
col="black", add=TRUE)
#'
#'
#'
#' @) GÃ©nÃ©rer un temps d'Ã©vÃ©nement suivant la loi de Weibull de paramÃ¨tres shape 1.2 et scale=0.2, reprÃ©senter graphiquement la variable et les fonctions associÃ©es (la survie, le hasard, la fonction de densitÃ©). Changer les paramÃ¨tres de la loi de Weibull, commenter. Remarque : la mÃ©diane de la loi de Weibull avec scale $\lambda$ et shape $\gamma$ est Ã©gale Ã 
#' $\lambda \times \log(2)^{1/\gamma}$
#'
## ----eval=FALSE-------------------------------------------
T_weib = rweibull(n=100, shape=1.2, scale=0.2)
hist(T_weib, probability=TRUE, main="f(t)")
abline(v=log(2)^(1/1.2)*0.2, col="red") # mÃ©diane
#median(T_weib)
curve(dweibull(x, shape=1.2, scale=0.2), add=TRUE, col="red")
curve(pweibull(x, shape=1.2, scale=0.2, lower.tail=FALSE),
from=0, to=0.8, ylim=c(0,1),
xlab="Temps", main="S(t)", ylab="")
curve(dweibull(x, shape=1.2, scale=0.2)/
pweibull(x, shape=1.2, scale=0.2,lower.tail=F),
xlab="Temps", main="h(t)", ylab="")
#'
#' @) RÃ©peter la question prÃ©cÃ©dente pour le temps suivant la loi exponentielle de paramÃ¨tre $\lambda=1/5$. La mÃ©diane de la loi de Weibull est Ã©gale Ã 
#' $\log(2)/{\lambda}$
#'
## ---- eval=FALSE, echo=FALSE------------------------------
T_exp = rexp(n=100, rate=1/5)
hist(T_exp, probability=TRUE)
abline(v=log(2)/(1/5), col="red")
curve(dexp(x, rate=1/5), add=TRUE, col="red")
curve((1/5)*exp(-(1/5)*x), add=TRUE, col="blue")
median(T_exp)
curve(pexp(x, rate=1/5, lower.tail=FALSE), from=0, to=10, ylim=c(0,1),
xlab="Temps", main="S(t)", ylab="")
curve(exp(-(1/5)*x), add=TRUE, col="red")
curve(dexp(x, rate=1/5)/ pexp(x, rate=1/5,
lower.tail=F), xlab="Temps", main="h(t)", ylab="")
#'
#' @) Estimer les paramÃ¨tres de la distriution de Weibull et Exponentielle pour les variables alÃ©atoires gÃ©nÃ©rÃ©es dans les questions prcÃ©dentes. Attention au paramÃ¨trage.
## ---- eval=FALSE------------------------------------------
ff_weib=fitdist(T_weib, distr="weibull")
ff_exp=fitdist(T_exp, distr="exp")
rate=ff_exp$estimate
shape=ff_weib$estimate[1]
scale=ff_weib$estimate[2]
# Moyennes observÃ©ee
mean(T_weib) ; mean(T_exp)
# MÃ©dianes observÃ©es
median(T_weib) ; median(T_exp)
# EspÃ©erance de la loi exponentielle
mean_exp=1/rate
# EspÃ©erance de Weibull
mean_weib=scale*gamma(1+shape)
# MÃ©diane de loi exponentielle
med_exp=log(2)/rate
# MÃ©diane de Weibull
med_weib=scale*log(2)^(1/shape)
#'
#' ## Visualisation amÃ©liorÃ©e
#'
## ---- eval=FALSE------------------------------------------
library(survminer)
library(ggplot2)
fit1 = survdiff(Surv(ttr, relapse)~grp, data=data)
fit2 = survfit(Surv(ttr, relapse)~grp, data=data)
plot(fit2, xlab="Time (days)", ylab= "Relapse probability",
col=c("blue", "red"))
legend("topright", legend=c("combination", "patch only"), col=c("blue", "red") , lty=c(1,1))
# ou bien
ggsurvplot(fit2, data=data)
ggsurvplot(fit2, risk.table = TRUE, pval=TRUE, conf.int=TRUE,
ggtheme=theme_minimal(),
risk.table.y.text.col=TRUE,
risk.table.y.text=FALSE, data=data)
## ----setup, include=FALSE--------------------------------------------------
knitr::opts_chunk$set(echo = TRUE, results="hide")
library(survival)
library(survminer)
library(fitdistrplus)
## ---- results="hide"-------------------------------------------------------
data(lung)
?lung
str(lung)
lung$sex=factor(lung$sex,  labels=c("m", "f"))
## ---- result="hide"--------------------------------------------------------
model1=coxph(Surv(time, status)~age+sex+ph.ecog+ph.karno+meal.cal+wt.loss, data=lung)
summary(model1)
## ---- result="hide"--------------------------------------------------------
lung1=lung[complete.cases(lung),]
model2=step(coxph(Surv(time, status)~age+sex+ph.ecog+ph.karno+meal.cal+wt.loss, data=lung1))
summary(model2)
## ---- result="hide", eval=FALSE--------------------------------------------
model2.sex = survfit(Surv(time, status)~sex, data=lung1)
ggsurvplot(model2.sex,data = lung1)
plot(model2.sex)
## ---- result="hide", eval=FALSE--------------------------------------------
model2.sex = survfit(Surv(time, status)~sex, data=lung1)
ggsurvplot(model2.sex,data = lung1)
plot(model2.sex)
## --------------------------------------------------------------------------
res.schoenf=residuals(model2, type="schoenfeld")
test.prop.hasard = cox.zph(model2)
model2.sex = survfit(Surv(time, status)~sex, data=lung1)
## ---- eval=FALSE-----------------------------------------------------------
S_f=survfit(Surv(time, status)~1, data=lung1[lung1$sex=="f",])
S_m=survfit(Surv(time, status)~1, data=lung1[lung1$sex=="m",])
plot(log(S_f$time), log(-log(S_f$surv)), type="l", col="red")
lines(log(S_m$time), log(-log(S_m$surv)), type="l", col="blue")
plot(survfit(Surv(time, status)~sex, data=lung1), fun="cloglog")
## ---- result="hide", eval=FALSE--------------------------------------------
res.deviance=residuals(model2, type="deviance")
plot(res.deviance)
text(1:nrow(lung1),residuals(model2,type="deviance"),names(residuals(model2,type="deviance"))) # pôur savoir les numéros
# des individus pour savoir ceux qui ont un mauvais résidus et on regarde la ligne comme ça:
lung1[rownames(lung1)=='37',]
res.dfbetas=residuals(model2, type="dfbetas") # résidus par individu par variable
plot(res.dfbetas[,1])
text(res.dfbetas[,1],rownames(res.dfbetas[,1]))
ggcoxdiagnostics(model2, type="deviance") #
## ---- result="hide", eval=FALSE--------------------------------------------
res.deviance=residuals(model2, type="deviance")
plot(res.deviance)
text(1:nrow(lung1),residuals(model2,type="deviance"),names(residuals(model2,type="deviance"))) # pôur savoir les numéros
# des individus pour savoir ceux qui ont un mauvais résidus et on regarde la ligne comme ça:
lung1[rownames(lung1)=='37',]
res.dfbetas=residuals(model2, type="dfbetas") # résidus par individu par variable
plot(res.dfbetas[,1])
text(res.dfbetas[,1],rownames(res.dfbetas[,1]))
ggcoxdiagnostics(model2, type="deviance") #
## ---- eval=FALSE-----------------------------------------------------------
res.marting = residuals(model2, type="martingale")
par(mfrow=c(2,2))
# residus de martingale par rapport aux differentes variables
plot(lung1$age, res.marting)
lines(lowess(lung1$age, res.marting), col="red")
abline(h=0,col="blue")
plot(lung1$ph.karno, res.marting)
lines(lowess(lung1$ph.karno, res.marting), col="red")
abline(h=0,col="blue") # au debut on a une tendance -> moyenne des res pas nulle -> faudrait modele stratifié
plot(lung1$ph.ecog, res.marting)
lines(lowess(lung1$ph.ecog, res.marting), col="red")
abline(h=0,col="blue") # cest pareil à la fin maisi ici cest pas des
plot(lung1$wt.loss, res.marting)
lines(lowess(lung1$wt.loss, res.marting), col="red")
# Choix de la forme de lien possible :
ggcoxfunctional(Surv(time, status)~age+log(age)+age^2, data=lung1)
# residus de martingale par rapport aux differentes variables
plot(lung1$age, res.marting)
lines(lowess(lung1$age, res.marting), col="red")
abline(h=0,col="blue")
plot(lung1$ph.karno, res.marting)
lines(lowess(lung1$ph.karno, res.marting), col="red")
abline(h=0,col="blue") # au debut on a une tendance -> moyenne des res pas nulle -> faudrait modele stratifié
abline(h=0,col="blue") # au debut on a une tendance -> moyenne des res pas
# nulle -> faudrait modele stratifié
plot(lung1$ph.ecog, res.marting)
lines(lowess(lung1$ph.ecog, res.marting), col="red")
abline(h=0,col="blue") # cest pareil à la fin maisi ici cest pas des
plot(lung1$wt.loss, res.marting)
lines(lowess(lung1$wt.loss, res.marting), col="red")
abline(h=0,col="blue")
# Choix de la forme de lien possible :
ggcoxfunctional(Surv(time, status)~age+log(age)+age^2, data=lung1)
ggcoxfunctional(Surv(time, status)~ph.karno, data=lung1)
ggcoxfunctional(Surv(time, status)~ph.ecog, data=lung1)
library(fitdistrplus)
library(ggplot2)
setwd("C:/Users/Sandro/Documents/R/Biostat/TP_biostat")
load(file="readmission.RData", .GlobalEnv) # Lire les donnees
head(readmission) # Premieres lignes
str(readmission) # Structure de donnees
par(mfrow=c(1,1))
ag.semipar = coxph(Surv(t.start, t.stop, event) ~ chemo + sex+ dukes+cluster(id), data=readmission)
ag.semipar = coxph(Surv(t.start, t.stop, event) ~ chemo + sex+ dukes+cluster(id), data=readmission)
summary(ag.semipar) # pour interpréter les RR il faut connaitre la référence
# Estimation de survie S(t)
plot(survfit(Surv(t.start, t.stop, event) ~ chemo+cluster(id) ,
data=readmission),col=c("red", "blue"))
summary(ag.semipar) # pour interpréter les RR il faut connaitre la référence
# Estimation de survie S(t)
plot(survfit(Surv(t.start, t.stop, event) ~ chemo+cluster(id) ,
data=readmission),col=c("red", "blue"))
ggplot(data=readmission, aes(x=time,fill=as.factor(enum)))+geom_density() # on voit pas grand chose
# Estimation de survie S(t)
plot(survfit(Surv(t.start, t.stop, event) ~ chemo+cluster(id) ,
data=readmission),col=c("red", "blue"))
ggplot(data=readmission, aes(x=time,fill=as.factor(enum)))+geom_density() # on voit pas grand chose
# trop de enum, on fait un subset pour prendre que les premiers
ggplot(data=subset(readmission, enum<=4), aes(x=time,fill=as.factor(enum)))+geom_density(alpha=0.5)
# Modele PWP - GT sans interaction
pwp = coxph(Surv(t.start, t.stop, event) ~ chemo + sex+ dukes+cluster(id)+strata(enum), data=readmission)
ggplot(data=readmission, aes(x=time,fill=as.factor(enum)))+geom_density() # on voit pas grand chose
# trop de enum, on fait un subset pour prendre que les premiers
ggplot(data=subset(readmission, enum<=4), aes(x=time,fill=as.factor(enum)))+geom_density(alpha=0.5)
# Modele PWP - GT sans interaction
pwp = coxph(Surv(t.start, t.stop, event) ~ chemo + sex+ dukes+cluster(id)+strata(enum), data=readmission)
summary(pwp)
plot(survfit(pwp)[1:3], col=c("red", "blue", "green"))
# Modele PWP - GT sans interaction
pwp = coxph(Surv(t.start, t.stop, event) ~ chemo + sex+ dukes+cluster(id)+strata(enum), data=readmission)
summary(pwp)
plot(survfit(pwp)[1:3], col=c("red", "blue", "green"))
legend(x=1500,y=1, legend=c("1 ere réhospistalisation", "2 eme rehospitalisation","3 eme rehospitalisation"),col=c("red", "blue","green"), lty=1, cex=0.8)
# mediane avec abline
#On considere que les 5 re-hospitalisations
readmission1=subset(readmission,enum<=5)
pwp1 = coxph(Surv(t.start, t.stop, event)~dukes*strata(enum)+cluster(id)+strata(enum),data=readmission1)
summary(pwp1)
frailty=coxph(Surv(t.start, t.stop, event)~ chemo + sex + dukes + frailty(id),
data=readmission)
summary(frailty)
# Modele sans fragilite
ag=coxph(Surv(t.start, t.stop, event)~chemo + sex + dukes + cluster(id),data=readmission)
summary(ag)
#Analyse des residus martingale
# Residus du modele Anderson-Gill
res_ag = resid(ag.semipar, type="martingale")
plot(res_ag,cex=0.7,col="darkgray",pch=19)
lines(lowess(res_ag),col='red')
abline(h=0,col="blue")
# on voit une tendance
ggcoxdiag
# Choix de la forme de lien possible :
ggcoxfunctional(Surv(time, status)~age+log(age)+age^2, data=lung1)
ggcoxfunctional(Surv(time, status)~ph.karno, data=lung1)
ggcoxfunctional(Surv(time, status)~ph.ecog, data=lung1)
?ggcoxdiag
# on voit une tendance
ggcoxdiagnostics()
# on voit une tendance
ggcoxdiagnostics(res_ag)
?ggcoxdiagnostics
# on voit une tendance
ggcoxdiagnostics(res_ag,type="martingale")
# Residus du modele de fragilite
res_fr = resid(frailty,
type="martingale")
plot(res_fr,cex=0.7,col="darkgray",pch=19)
lines(lowess(res_ag),col='red')
abline(h=0,col="blue")
# Residus du modele PWP
# (avec interactions)
res_pwp_int = resid(pwp1,type="martingale")
plot(res_pwp_int,cex=0.7,col="darkgray",pch=19)
lines(lowess(res_ag),col='red')
abline(h=0,col="blue")
# Residus du modele PWP
# (sans interactions)
res_pwp = resid(pwp,type="martingale")
plot(res_pwp,cex=0.7,col="darkgray",pch=19)
lines(lowess(res_ag),col='red')
abline(h=0,col="blue")
# Analyse residu  test avec hypothese nulle coeff est constant dans le temps
# Test
cox.zph(frailty)
# Graphique
plot(cox.zph(frailty))
library(fitdistrplus)
# on a que une covariable pour voir comment ça se passe dans cas simple
setwd("C:/Users/Sandro/Documents/R/Biostat/TP_biostat")
load(file="FlowDataAnalyse.RData", .GlobalEnv) # Lire les donnees
head(data) # Premieres lignes
str(data) # Structure de donnéees
summary(data)
#Durée d'observation pour chaque patiente
dur_obs = (data$End_obs-data$Start_obs)
dur_obs = as.numeric((data$End_obs-data$Start_obs))/(60*60)
dur_acc=(data$End_lab-data$Start_lab)
# Durée d'accouchement en heures
dur_acc=as.numeric((data$End_lab-data$Start_lab))/(60*60)
# Analyse de "séjour" en observation
hist(dur_obs,probability=TRUE,col="blue")
ff_exp=fitdist(data = dur_obs, distr="exp") # Ajustement de loi exponentielle
ff_exp
ff_weib=fitdist(data = dur_obs, distr="weibull") # Ajustement de loi de Weibull
ff_weib
rate=ff_exp$estimate  # temps moyen d'arrivée devenement pour loi exponentielle
shape=ff_weib$estimate[1]
scale=ff_weib$estimate[2]
# Moyenne observee # temps moyen dans la salle d'observation
mean_obs = mean(dur_obs)
# Esperance de la loi exponentielle
mean_exp=1/rate
# Esperance de Weibull
scale*gamma(1+shape)
# Mediane observee # la moitié des patientes sortent au bout de la médiane en heures.
med_dur=median(dur_obs)
# Mediane de loi exponentielle
med_exp=log(2)/rate
# Mediane de Weibull
med_weib=scale*log(2)^(1/shape)
cox.par.dur.obs = survreg(Surv(dur_obs)~ data$Age, dist="weibull")
cox.par.dur.obs = survreg(Surv(dur_obs)~ data$Age, dist="weibull")
summary(cox.par.dur.obs)
# calcul des paramètres de weibull par survregx
scale=exp(cox.par.dur.obs$coefficients[1]) # scale estim
shape=1/cox.par.dur.obs$scale # shape estim
library(flexsurv)
cox.par.dur.obs.flex = flexsurvreg(Surv(dur_obs)~ data$Age, dist="weibull")
cox.par.dur.obs.flex
data$dur_acc= dur_acc
ggplot(data=data, aes(x=dur_acc,fill=Age))+geom_density() # aes cest notre variables x variable d'étude
cox.npar.dur_acc = coxph(Surv(dur_acc, Ces_yn)~Age, data=data)
summary(cox.npar.dur_acc)
# Fonction survfit estimation de S(t) # fonction de survie avec accouchement comme evenement
plot(survfit(Surv(dur_acc, Ces_yn)~Age, data=data),
col=c("red", "blue", "black"))
setwd("C:/Users/Sandro/Documents/R/Biostat/TP_biostat")
