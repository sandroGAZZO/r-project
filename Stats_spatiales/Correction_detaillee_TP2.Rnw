\documentclass[a4paper]{article}
\usepackage[frenchb]{babel}
\usepackage[utf8]{inputenc}
\usepackage{Sweave}
\usepackage{url}
\usepackage{graphicx}
\usepackage{geometry}
\geometry{hmargin=2.5cm,vmargin=1.5cm}

\newlength{\fancyvrbtopsep}
\newlength{\fancyvrbpartopsep}
\makeatletter
\FV@AddToHook{\FV@ListParameterHook}{\topsep=\fancyvrbtopsep\partopsep=\fancyvrbpartopsep}
\makeatother
\setlength{\fancyvrbtopsep}{1pt}
\setlength{\fancyvrbpartopsep}{1pt}
\newcommand{\R}{\textbf{R}}

\title{Auto-correlation et r\'egression spatiales}
\date{}
\begin{document}
\SweaveOpts{concordance=TRUE}
\setkeys{Gin}{width=0.5\textwidth}
\maketitle{}
\paragraph{Objectifs}
Réaliser une étude d'auto-corrélation spatiale et une modélisation linéaire spatiale avec le logiciel utilis\'e est \R et ses packages {\it spdep, spatialreg} et {\it fields}.\\

\section*{Données} 

Les esp\`eces \'epibenthiques (qui vivent sur les fonds marins) sont des  biomarqueurs de l'\'etat environnemental et des sources d'alimentation des poissons de la baie du Saint Laurent. Depuis plusieurs ann\'ees des campagnes scientifiques sont men\'ees pour mesurer la biomasse de ces esp\`eces.
Le Golfe du Saint Laurent est d\'ecoup\'e en strates de milieux homog\`enes.\\[0.2cm]
Le fichiers StLaurent.csv contient pour l'ann\'ee 2000 les valeurs des variables suivantes :\\[0.2cm]
\begin{tabular}{ll}
strate :& num\'ero de la strate\\
longitude :& longitude du centre de la strate\\
latitude :& latitude du centre de la strate\\
BH :& pr\'esence (1) absence (0) de bernard l'ermite\\
totconsum :& indice de pr\'edation\\
depth :& profondeur\\
temperature :& temp\'erature\\
\end{tabular}
Le fichier "boundaries38s.dat" donne pour les 38 strates les coordonn\'ees des points formant les bords:\\[0.2cm]
\begin{tabular}{ll}
colonne 1 :& num\'ero de la strate  (de 401 \`a 438)\\
colonne 2 :& longitude du point\\
colonne 3 :& latitude du point\\
\end{tabular}

<<echo=FALSE,include=FALSE>>=
rm(list=ls())

#--------------------------------------------
# chargement des packages et fonctions utilises 
#--------------------------------------------

library(fields)
library(spdep)
library(spatialreg)
traceStrates = function(titre="",couleur='white'){
               if (length(couleur)==1) couleur=rep(couleur,38)
               plot(range(longitude),range(latitude),type="n",xlim=c(-66,-60),ylim=c(45,50),
                    main=titre,xlab="Longitude",ylab="Latitude")
               rect(-66,45,-60,50,col='brown')
               for(i in 401:439){
                   polygon(bornes[which(bornes[,1]==i),2:3],col=couleur[i-400])
               }
}
@

<<include=FALSE,echo=FALSE>>=
source("C:/Users/Sandro/Documents/R/Stats_spatiales/tracestrates.R")
donnees = read.csv(file = "C:/Users/Sandro/Documents/R/Stats_spatiales/StLaurent.csv",sep=";")
summary(donnees)
attach(donnees)
BH = as.factor(BH)
coords = cbind(longitude,latitude)
bornes = read.table(file = "C:/Users/Sandro/Documents/R/Stats_spatiales/boundaries38s.dat")
bornes = as.matrix(bornes)
@



<<fig=TRUE, echo=FALSE>>=
  # Trace de la carte des strates
  #------------------------------
traceStrates(titre='Strates')
points(longitude,latitude)

traceStrates(titre='Strates')
text(longitude,latitude,strate,cex=0.5)

@

\section{Auto-corrélation spatiale}
L’autocorrélation spatiale mesure la corrélation d’une variable avec elle-même, lorsque les observations sont décalées  dans l’espace.\\
Pour obtenir l'auto-corrélation et réaliser un test d’autocorrélation, il faut spécifier une matrice de poids $W$. On cherche une matrice de voisinage permettant de décrire de manière adéquate les relations entre les entités géographiques tout en estimant un modèle de régression identifiable (choix pas toujours facile).\\
Des indices d’autocorrélation spatiale (Moran ou Geary) évaluent la dépendance spatiale d’une même variable en différents sites et teste la significativité de la structure spatiale identifiée. Ils s'intéressent à la proximité spatiale et à la ressemblance ou dissemblance des sites étudiés.

<<fig=TRUE, echo=FALSE,width=6, height=4>>=
### 1) par triangulation on calcule les poids de proximite wij

voisinage1 <- tri2nb(coords,row.names=strate) # par triangulation

## 2) basée sur les plus proches voisins 

ppv <- knearneigh(coords, k=4)
voisinage2 = knn2nb(ppv)

ppv2 <- knearneigh(coords, k=2)
voisinage22 = knn2nb(ppv2)

## 3) basée sur une bande de distance

knn <- knearneigh(coords, k=4)
nb1=knn2nb(knn)
dist=unlist(nbdists(nb1,coords))
up=max(dist)
voisinage3=dnearneigh(coords,0,up)
# ou voisinage3 <- dnearneigh(coords, d1=0, d2=0.85)

## 4) basée sur un graphe des plus proches voisins

voisinage4 <- graph2nb(gabrielneigh(coords), sym = TRUE)



par(mfrow=c(2,2))

traceStrates('Voisinages par triangulation')
plot(voisinage1,coords,add=TRUE,col='red')

traceStrates('Voisinages par plus proches voisins')
plot(voisinage2,coords,add=TRUE,col='red')

traceStrates('Voisinages par plus petites distances')
plot(voisinage3,coords,add=TRUE,col='red')

traceStrates('Voisinages par graphe')
plot(voisinage4,coords,add=TRUE,col='red')
@

<<echo=FALSE>>=
# Assignation d’une pondération entre voisins : matrice de voisinage

#---------------------
par(mfrow=c(1,1))

voisinage = voisinage3
poids.vois <- nb2listw(voisinage,style="W")

#les poids
#poids.vois$weights

#les voisins
#poids.vois$neighbours

mat.vois <- nb2mat(voisinage,style ="W")
#mat.vois

poids.vois.sym = listw2U(poids.vois)  # pour symetriser W 

### ou avec une autre matrice de poids

distgab <- nbdists(voisinage4, coords)

fdist <- lapply(distgab, function(x) 1 - x/max(dist(coords)))

poids.vois2 <- nb2listw(voisinage4, glist = fdist)
## ou
poids.vois2 <- nb2listw(voisinage4, style ="W")
poids.vois.sym2 <- listw2mat(poids.vois2)
@
\subsection{Indice de Moran ou Geary}

<<fig=TRUE, echo=FALSE>>=
######indice de Moran########
titre = paste("Indice de predation")
paletteBleue = colorRampPalette(c("white", "blue"))
couleur = paletteBleue(100)[findInterval(totconsum,seq(min(totconsum),max(totconsum),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(totconsum,2),cex=0.5)

@

\section{Diagramme de Moran}
Le diagramme de Moran (nuage de points entre les valeurs de la variable $Z$ étudiée centrée et valeurs moyennes de la variable pour les observations voisines ($WZ$) en ordonnée, avec $W$ la matrice de poids normalisée) permet une lecture rapide de la structure spatiale. A ce nuage, on ajoute la droite de régression linéaire de $WZ$ par $Z$,  les droites $Z = 0$ et $WZ = 0$ qui délimitent 4 quadrants.\\ Si la répartition des données est aléatoire, pas de relation particulière entre $Z$ et  $WZ$ (répartition uniforme dans les quadrants). Sinon, la pente de la régression linéaire est non nulle; chaque quadrant donne un type d’association spatiale. Ce diagramme permet également de relever les sites les plus atypiques, loins de la structure spatiale étudiée. 
\begin{itemize}
\item Le quadrant 1 (en haut à droite) donne des valeurs de  $Y$  plus grandes que la moyenne, dans un voisinage qui leur ressemblent (autocorrélation positive et indice élevé).
\item Le quadrant 2 (en bas à droite) donne des valeurs de  $Y$  plus grandes que la moyenne, dans un voisinage qui ne leur ressemble pas (autocorrélation négative et indice élevé).

\item Le quadrant 3 (en bas à gauche) donne des valeurs de  $Y$  plus faibles que la moyenne, dans un voisinage qui  leur ressemble (autocorrélation positive et indice faible).
\item Le quadrant 4 (en haut à gauche) donne des valeurs de  $Y$  plus faibles que la moyenne, dans un voisinage qui ne leur ressemble pas (autocorrélation négative et indice faible).
\end{itemize}
<<fig=TRUE, echo=FALSE>>=
totconsumred <- scale(totconsum)
totconsumred=as.data.frame(totconsumred)
colnames(totconsumred)=c("totconsumred")
moran.plot(totconsumred$totconsumred, listw=poids.vois)
@

Le diagramme précédent met en évidence une structure spatiale particulière (cadrants 1, 3 et 4). On calcule donc l'indice d’autocorrélation spatiale et effectue un test afin de répondre à la question: 1) les observations voisines sont-elles sensables ou pas par  hasard?  Si la réponse est non il y a de l’autocorrélation spatiale mais dans quel sens. On teste la nullité de l'indice sous l'hypothèse de normalité des données  ou non (dans ce dernier cas on utilise la randomisation; la statistique des observations est comparée à la distribution obtenue en permuttant au hasard les données).\\ 
Le programme suivant montre qu'il y a une auto-corrélation spatiale positive (indide de Moran positive et hypothèse de nullité de l'indice rejetée) avec un seul décalage.
<<echo=FALSE>>=
attach(totconsumred)
print(moran.test(totconsumred$totconsumred,poids.vois))## randomisation
##ou
print(moran.test(totconsum,poids.vois))## randomisation
print(moran.test(totconsum,poids.vois,randomisation=F))## sans randomisation

print(moran.mc(totconsum,poids.vois,nsim=99))## monte carlo

@

Calcul des intervales de l'indice de Moran :
   
<<echo=FALSE>>=
moran.range <- function(lw) {
wmat <- listw2mat(lw)
return(range(eigen((wmat+t(wmat))/2)$values))
}

moran.range(poids.vois)
@

\paragraph*{Indice de Geary :} montre également une autocorrélation spatiale positive (indice plus petite que $1$)

<<echo=FALSE>>=
#--------------

print(geary.mc(totconsum,poids.vois,nsim=99))
print(geary.test(totconsum,poids.vois))
print(geary.test(totconsum,poids.vois,randomisation=F))

@
\subsection{Autocorrélation spatiale locale}
Les indices précédents mesurent l'autocorrélation globale, pour étudier l’autocorrélation spatiale locale (LISA ; Local Indicators of Spatial Association), des versions locales des indices précédents existents et permettent de mesurer pour une variable donnée la dépendance locale entre une unité spatiale et les unités spatiales voisines. Ils  permettent d'identifier les regroupements similaires autour d’un site donné et les zones de 
non-stationnarité spatiale locale.\\
{\textbf L'Indice de Moran locale en un site $i$ est }:
  $$
  I_i = \sum_{j}w_{ij}(Z_j-\overline{Z})(Z_i-\overline{Z}) 
  $$
<<fig=TRUE,echo=FALSE>>=
##LISA sur la variable centrée
    moran.local <- localmoran(totconsumred$totconsumred,
                              poids.vois,zero.policy=TRUE)
    quadrant <- vector(mode="numeric",length=nrow(moran.local))
# Centrer/reduire l'indice locam
    moran.localred <- scale(moran.local[,1])    
    
# significance threshold
    signif <- 0.05 
    
#builds a data quadrant
    quadrant[totconsumred$totconsumred >0 & moran.localred>0] <- 4  
    quadrant[totconsumred$totconsumred <0 & moran.localred<0] <- 1      
    quadrant[totconsumred$totconsumred <0 & moran.localred>0] <- 2
    quadrant[totconsumred$totconsumred >0 & moran.localred<0] <- 3
    quadrant[moran.local[,5]>signif] <- 0   
    
    brks <- c(0,1,2,3,4)
    colors <- c("white","blue",rgb(0,0,1,alpha=0.4),rgb(1,0,0,alpha=0.4),"red")
    traceStrates("lISA",colors[findInterval(quadrant,brks,all.inside=FALSE)])
    box()
    legend("bottomleft", legend = c("insignificant","low-low","low-high","high-low","high-high"),
           fill=colors,bty="n")
@
\section{Régression spatiale}
    \subsection{Modèle linéaire}
<<fig=TRUE,echo=FALSE>>=
# 1. Modele lineaire standard
#----------------------------
par(mfrow=c(2,1))  
titre = paste("Profondeur")
paletteVerte = colorRampPalette(c("white", "green"))
    couleur = paletteVerte(100)[findInterval(depth,seq(min(depth),max(depth),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(depth,2),cex=0.5)
    
titre = paste("Temperature")
paletteRouge = colorRampPalette(c("white", "red"))
couleur = paletteRouge(100)[findInterval(temperature,seq(min(temperature),max(temperature),l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(temperature,2),cex=0.5)
    
#pairs(cbind(totconsum,temperature,depth))
    
totcons.lm <- lm(totconsum ~  temperature + depth) 
summary(totcons.lm)
anova(totcons.lm)
totcons.lm <- lm(totconsum ~  temperature) 
summary(totcons.lm)
anova(totcons.lm)
@

\subsection{Modèle SAR}
    $$Z = \rho W  Z + X \beta + \varepsilon,$$ $\varepsilon \sim N(0,\sigma^2),$ ou pas $(I-\rho W)$ inversible
<<fig=TRUE,echo=FALSE>>=
par(mfrow=c(1,1))

totcons.lagsarlm<-lagsarlm(totcons.lm,listw=poids.vois,type="lag",method="eigen")
    summary(totcons.lagsarlm)
    res <- residuals(totcons.lagsarlm)## résidus non-autocorrélés
    moran.test(res,poids.vois)
    
titre = "Residus modele SAR a retard"
paletteRes = colorRampPalette(c("yellow", "cyan"))
couleur = paletteRes(100)[findInterval(res,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res,2),cex=0.5)
@

 Les mesures importantes de pertinence sont la valeur de log-vraisemblance, les critères d’Akaïke et de Schwarz. Ces critères permettront de déceler la meilleure spécification spatiale : Significativité du paramètre autorégressif; Variation des valeurs estimées des coefficients des variables explicatives.\\
 
\paragraph{Interprétation du modèle} : dans un modèle linéaire classique, l'impact d'une variation d'une variable explicative sur
    la réponse est égale au coefficient correspondant (dérivée partiel de la réponse en fonction de la variable explcative).\\
Dans ce modèle SAR; les éléments diagonaux de la matrice des dérivées partielles de $z_i$ par rapport à $x_i$ représentent les impacts directs qui incluent les effets de spillovers (rétombées) propres, hétérogènes pour chaque observation en présence d’autocorrélation spatiale, dûs aux poids différents de la matrice d’intéractions. Les éléments hors-diagonaux représentent les impacts indirects ou effets de spillovers (collectés dans la matrice) ils quantifient les effets globaux (sur tout l’échantillon). En sommant les impacts directes  (resp. indirects), on obtient l'impact total direct (resp indirect).
    
<<echo=FALSE>>=
    rh_sar=totcons.lagsarlm$rho
    betarm=totcons.lagsarlm$coefficients[2]
## La fonction invIrW calcule l’inverse de (I - rho*W)
    Sw=invIrW(poids.vois, rh_sar)*betarm
    n=length(totcons.lagsarlm$residuals)
    i_n=matrix(1,nrow=n)
    direct=diag(Sw)
    indirect=Sw-diag(diag(Sw))
    ADE=mean(direct) ## impact direct moyen
    AIE=1/n*t(i_n)%*%indirect%*%i_n ## impact indirect moyen
    ATE=1/n*t(i_n)%*%Sw%*%i_n ## impact total
    
# Calcul des effets indirects totaux pour chaque observation
    Ind_tot=indirect%*%i_n
    Ind_tot[1:10,1]
    ADE
    AIE
    ATE
    Imp<-impacts(totcons.lagsarlm,listw=poids.vois,R=1000)
@


\subsection{Modèle SEM}
Autocorrélation des residus (modèle SEM):
      $Z = \rho W  X + X \beta + \varepsilon$,  avec  hypothese de normalité $\varepsilon \sim N(0,\sigma^2)$ ou non
                                                                                               
<<fig=TRUE,echo=FALSE>>=                                          #test d'autocorrelation des residus 
 lm.morantest(totcons.lm,poids.vois)
   paletteRes = colorRampPalette(c("yellow", "cyan"))
###sans hypothese de normalite
res0 <- residuals(totcons.lm)
 moran.test(res0,poids.vois)
#####graphique des residus 
couleur = paletteRes(100)[findInterval(res0,seq(-0.3,0.3,l=100))]
titre = paste("Residus modele lineaire")
traceStrates(titre,couleur)
text(longitude,latitude,round(res0,2),cex=0.5)
@

On accepte l'existence d'une auto-corrélation positive

<<fig=TRUE,echo=FALSE>>=
# Estimation du modèle
totcons.errorsarlm <- errorsarlm(totconsum ~  temperature,data=donnees,poids.vois) 
#ou
#totcons.errorsarlm <- errorsarlm(totcons.lm,poids.vois) 
summary(totcons.errorsarlm)
res1 <- residuals(totcons.errorsarlm)
moran.test(res1,poids.vois) ## les résidus ne sont auto-corrélés
titre = "Residus modele SAR sur les erreurs"
couleur = paletteRes(100)[findInterval(res1,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res1,2),cex=0.5)
@
\subsection{Modèle SDM: Modele mixte SAR à retard}
Modèle avec décalages des variables explicatives) : 
      $Z = \rho_1 W_1  Z +\rho_2 W_2  X+ X \beta + \varepsilon $, $\varepsilon \sim N(0,\sigma^2)$.\\ C'est un modèle SAR avec le décalage spatial des variables explicatives en plus
      
<<fig=TRUE,echo=FALSE>>=
totcons.mixte <- lagsarlm(totconsum ~  temperature,
data=donnees,poids.vois,type="mixed") 
summary(totcons.mixte)
res3 <- residuals(totcons.mixte)
moran.test(res3,poids.vois)
titre = "Residus modele mixte SAR a retard"
couleur = paletteRes(100)[findInterval(res3,seq(-0.3,0.3,l=100))]
traceStrates(titre,couleur)
text(longitude,latitude,round(res3,2),cex=0.5)
#########Une autre manière #######
# 1) créer des décalages spatiaux des X
# 2) modifier la formule
# 3) Estimer le modèle SAR augmenté
# 1) Création des décalages spatiaux des X
# Utilisation de la fonction lag.listw()
donnees$Wtemperature=lag.listw(poids.vois,donnees$temperature)
# 2) Modifier la formule du modèle linéaire
totcons.sarlm<- lm(totconsum ~  temperature + Wtemperature, data=donnees)
# 3) Estimation du modèle SAR sur cette formule augmentée des décalages spatiaux de
totcons.mixte2<- lagsarlm(totcons.sarlm,data=donnees,poids.vois, type="lag", method="eigen")
summary(totcons.mixte2)
@
    
Interpretation du modèle SDM
    
<<echo=FALSE>>=
W_mat=nb2mat(voisinage,style="W")
betaw=totcons.mixte$coefficients[3]
    beta=totcons.mixte$coefficients[2]
    rh_sdm=totcons.mixte$rho
    Sw=invIrW(poids.vois, rh_sdm)%*%(diag(n)*beta + W_mat*betaw)
    direct=diag(Sw)
    indirect=Sw-diag(diag(Sw))
    ADE_sdm=mean(direct)
    AIE_sdm=1/n*t(i_n)%*%indirect%*%i_n
    ATE_sdm=1/n*t(i_n)%*%Sw%*%i_n
    ADE_sdm
    AIE_sdm
    ATE_sdm
    imp_sdm<-impacts(totcons.mixte,listw=poids.vois, R=1000)
    imp_sdm
@
\subsection{Modèle SLX}
Modèle SLX : $Z = \rho W  X + X \beta + \varepsilon$, $\varepsilon \sim N(0,\sigma^2$, décalage spatial des variables explicatives
<<echo=FALSE>>=
# Estimation par MCO du modèle de base en incluant les décalages spatiaux des X
totcons.sarlm<- lm(totconsum ~  temperature + Wtemperature, data=donnees)
totcons.slx=lm(totcons.sarlm,data=donnees)
summary(totcons.slx)
    # Interprétation du modèle SLX
    beta<-totcons.slx$coefficients[2]
    betaw<-totcons.slx$coefficients[3]
    Sw<-diag(n)*beta + W_mat*betaw
    ADE_slx<-mean(diag(Sw))
    AIE_slx<-mean(rowSums(W_mat*betaw))
    AIE_slx_alt<-mean(colSums(W_mat*betaw))
    ATE_slx<-beta+ AIE_slx
@
\subsection{Comparaison des modèles}
    
<<echo=FALSE>>=
## Test de Lagrande de modèles linéaires
totcons.lm <- lm(totconsum ~temperature+depth) 
summary(lm.LMtests(totcons.lm, poids.vois)) ## test de dépendance sur les erreurs du modèle linéaire classique
#LMlag= test de dépendence sur l'absence de décalage dans la #variable réponse; RLMerr  test de dépendance sur les erreurs du #modèle avec réponse décalé, SARMA=LMerr + RLMlag,...
res=lm.LMtests(totcons.lm, poids.vois, 
test=c("LMerr", "LMlag", "RLMerr","RLMlag", "SARMA"))
summary(res)
lm.LMtests(residuals(totcons.lm), poids.vois)## sur les résidus
    
# Comparaison des modeles
#------------------------
# Test de rapport de vraissemblance
print(LR.sarlm(totcons.mixte,totcons.errorsarlm))
### comparaison des AIC
print(AIC(totcons.mixte,totcons.errorsarlm,totcons.lagsarlm,totcons.lm,totcons.slx))
@
      
 \end{document} 

